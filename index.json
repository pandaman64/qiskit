{"revision_to_date": {"1282": 1517219684000, "1241": 1515410839000, "1158": 1513592275000, "1162": 1513763548000, "1294": 1518446831000, "1069": 1508254735000, "17": 1488947030000, "1431": 1523900871000, "1562": 1528721123000, "2459": 1551220390000, "2460": 1551303666000, "1437": 1524067724000, "2462": 1551311399000, "2463": 1551315011000, "2464": 1551320086000, "929": 1505479548000, "1323": 1520347883000, "1197": 1513974780000, "1455": 1525715330000, "1200": 1513977192000, "821": 1501940680000, "2461": 1551309270000, "1081": 1508772666000, "1248": 1515431139000, "450": 1495468169000, "1092": 1509704747000, "1526": 1527581142000, "2465": 1551323022000, "1487": 1526066850000, "1336": 1520968403000, "1490": 1526372306000, "1109": 1510939204000, "2009": 1538645753000, "1243": 1515414281000, "1372": 1523442074000, "1502": 1526899172000, "1632": 1530868113000, "2019": 1538740147000, "1124": 1512420589000, "1253": 1515523066000, "876": 1503652548000, "877": 1503660746000, "1140": 1512678476000, "1275": 1516967870000, "1270": 1516630651000, "1615": 1530519021000, "891": 1504169436000, "2302": 1545217568000, "1663": 1532005274000}, "project_url": "https://qiskit.org", "graph_param_list": [{"arch": "x86_64", "python": "3.5", "branch": "master", "os": "Linux 4.9.0-8-amd64", "cpu": "Intel(R) Xeon(R) CPU @ 2.30GHz", "machine": "qiskit-dag-benchmark", "ram": "3792956"}], "benchmarks": {"unroller.UnrollLargeFile.time_prime8": {"repeat": 0, "param_names": [], "timeout": 60.0, "type": "time", "sample_time": 0.01, "version": "43287b14ad73af4bac1846890c621ac030ba36ae9da843eea4364a36bd79120f", "code": "class UnrollLargeFile:\n    def time_prime8(self):\n        pass_ = Unroller(['cx', 'u1', 'u2', 'u3'])\n        unrolled_dag = pass_.run(self.prime8)\n\n    def setup(self):\n        self.prime6 = self.load_file('prime6_pkrm.qasm')\n        self.prime8 = self.load_file('prime8_pkrm.qasm')", "min_run_count": 2, "unit": "seconds", "name": "unroller.UnrollLargeFile.time_prime8", "params": [], "processes": 2, "warmup_time": -1, "number": 0}, "unroller.UnrollerBench.time_unroll_1q_chain_conditional": {"repeat": 0, "param_names": [], "timeout": 60.0, "type": "time", "sample_time": 0.01, "version": "ad98bac7aa09835e9c7177563216af332cfc343ca467b2cf2acf1b9cb1cf0e7c", "code": "class UnrollerBench:\n    def time_unroll_1q_chain_conditional(self):\n        \"\"\"Test unroll chain of 1-qubit gates interrupted by conditional.\n        \"\"\"\n        pass_ = Unroller(['u1', 'u2', 'u3'])\n        unrolled_dag = pass_.run(self.chain_conditional)\n\n    def setup(self):\n        self.setup_basic()\n        self.setup_toffoli()\n        self.setup_1q_chain_conditional()", "min_run_count": 2, "unit": "seconds", "name": "unroller.UnrollerBench.time_unroll_1q_chain_conditional", "params": [], "processes": 2, "warmup_time": -1, "number": 0}, "unroller.UnrollerBench.time_basic_unroll": {"repeat": 0, "param_names": [], "timeout": 60.0, "type": "time", "sample_time": 0.01, "version": "bd64943b6969cbad80f3bba745a4277da5cfed8608abecf8bba454dd1c00223f", "code": "class UnrollerBench:\n    def time_basic_unroll(self):\n        \"\"\"Test decompose a single H into u2.\n        \"\"\"\n        pass_ = Unroller(['u2'])\n        unrolled_dag = pass_.run(self.basic)\n\n    def setup(self):\n        self.setup_basic()\n        self.setup_toffoli()\n        self.setup_1q_chain_conditional()", "min_run_count": 2, "unit": "seconds", "name": "unroller.UnrollerBench.time_basic_unroll", "params": [], "processes": 2, "warmup_time": -1, "number": 0}, "quantum_volume.QuantumVolumeBenchmark.time_simulator_transpile": {"repeat": 0, "param_names": ["qubits", "depth"], "timeout": 600, "type": "time", "sample_time": 0.01, "version": "16f09c02c6d092e966002b447b8792732ed3a73c2ebd8d909a51fe40e0622c43", "code": "class QuantumVolumeBenchmark:\n    def time_simulator_transpile(self, _, __):\n        transpiler.transpile(self.circuit, self.sim_backend)\n\n    def setup(self, n, depth):\n        random_seed = np.random.seed(10)\n        qreg = QuantumRegister(n)\n        self.circuit = build_model_circuit(qreg, depth=depth, seed=random_seed)\n        self.sim_backend = BasicAer.get_backend('qasm_simulator')", "min_run_count": 2, "unit": "seconds", "name": "quantum_volume.QuantumVolumeBenchmark.time_simulator_transpile", "params": [["1", "2", "3", "5", "8", "13", "14"], ["1", "2", "3", "5", "8", "13", "21", "34"]], "processes": 2, "warmup_time": -1, "number": 0}, "random_circuit_hex.BenchRandomCircuitHex.time_ibmq_backend_transpile": {"repeat": 0, "param_names": ["param1"], "timeout": 60.0, "type": "time", "sample_time": 0.01, "version": "5c0a96fbbb3fe385646948a1415214e2c2944bfacd498444f03262debb36d2b1", "code": "class BenchRandomCircuitHex:\n    def time_ibmq_backend_transpile(self, _):\n        # Run with ibmq_16_melbourne configuration\n        coupling_map = [[1, 0], [1, 2], [2, 3], [4, 3], [4, 10], [5, 4],\n                        [5, 6], [5, 9], [6, 8], [7, 8], [9, 8], [9, 10],\n                        [11, 3], [11, 10], [11, 12], [12, 2], [13, 1],\n                        [13, 12]]\n        transpiler.transpile(self.circuit,\n                             basis_gates=['u1', 'u2', 'u3', 'cx', 'id'],\n                             coupling_map=coupling_map)\n\n    def setup(self, n):\n        depth = 2 * n\n        seed = 5\n        self.circuit = make_circuit_ring(n, depth, seed)[0]\n        self.sim_backend = BasicAer.get_backend('qasm_simulator')", "min_run_count": 2, "unit": "seconds", "name": "random_circuit_hex.BenchRandomCircuitHex.time_ibmq_backend_transpile", "params": [["4", "6", "8", "10", "12", "14"]], "processes": 2, "warmup_time": -1, "number": 0}, "transpiler_benchmarks.TranspilerBenchSuite.time_cx_transpile": {"repeat": 0, "param_names": [], "timeout": 60.0, "type": "time", "sample_time": 0.01, "version": "9f40eb1cafc058eb573c6ce8866bae3bee9a12a82cb0c76c019e790c57f76dce", "code": "class TranspilerBenchSuite:\n    def time_cx_transpile(self):\n        if self.local_qasm_simulator is None:\n            self.cx_circuit.compile('cx_circuit')\n        else:\n            qiskit.compile(self.cx_circuit, self.local_qasm_simulator)\n\n    def setup(self):\n        version_parts = qiskit.__version__.split('.')\n    \n        if version_parts[0] == '0' and int(version_parts[1]) < 5:\n            self.local_qasm_simulator = None\n        elif hasattr(qiskit, 'BasicAer'):\n            self.local_qasm_simulator = qiskit.BasicAer.get_backend(\n                'qasm_simulator')\n        elif hasattr(qiskit, 'get_backend'):\n            self.local_qasm_simulator = qiskit.get_backend(\n                'local_qasm_simulator')\n        else:\n            self.local_qasm_simulator = qiskit.BasicAer.get_backend(\n                \"qasm_simulator\")\n        self.single_gate_circuit = self._build_single_gate_circuit()\n        self.cx_circuit = self._build_cx_circuit()\n        self.qasm_path = os.path.abspath(\n            os.path.join(os.path.dirname(__file__), 'qasm'))\n        large_qasm_path = os.path.join(self.qasm_path, 'test_eoh_qasm.qasm')\n    \n        if hasattr(qiskit, 'load_qasm_file'):\n            self.large_qasm = qiskit.load_qasm_file(large_qasm_path)\n        elif version_parts[0] == '0' and int(version_parts[1]) < 5:\n            self.large_qasm = qiskit.QuantumProgram()\n            self.large_qasm.load_qasm_file(large_qasm_path,\n                                           name='large_qasm')\n        else:\n            self.large_qasm = qiskit.QuantumCircuit.from_qasm_file(\n                large_qasm_path)", "min_run_count": 2, "unit": "seconds", "name": "transpiler_benchmarks.TranspilerBenchSuite.time_cx_transpile", "params": [], "processes": 2, "warmup_time": -1, "number": 0}, "state_tomography.StateTomographyBench.time_state_tomography_random": {"repeat": 0, "param_names": ["param1"], "timeout": 360.0, "type": "time", "sample_time": 0.01, "version": "6b7d00489756ec84daf23ad773ebe3d503931c7780b39783f500a03b603bbbd9", "code": "class StateTomographyBench:\n    def time_state_tomography_random(self, n_qubits):\n        # random target state: first column of a random unitary\n        target = random_unitary_matrix(pow(2, n_qubits))[0]\n        if not self.use_quantum_program:\n            self._state_tomography(target, 'random', n_qubits)\n        else:\n            self._state_tomography_quantum_program(target, 'random', n_qubits)\n\n    def setup(self, _):\n        if hasattr(qiskit, 'QuantumProgram'):\n            self.use_quantum_program = True\n        else:\n            self.use_quantum_program = False", "min_run_count": 2, "unit": "seconds", "name": "state_tomography.StateTomographyBench.time_state_tomography_random", "params": [["2", "3", "4", "5"]], "processes": 2, "warmup_time": -1, "number": 0}, "transpiler_benchmarks.TranspilerBenchSuite.time_transpile_from_large_qasm": {"repeat": 0, "param_names": [], "timeout": 60.0, "type": "time", "sample_time": 0.01, "version": "d4fd77afa222078087327c715fda7b45eb5ba5344b87e1eeb7cf22bab2ffb892", "code": "class TranspilerBenchSuite:\n    def time_transpile_from_large_qasm(self):\n        if self.local_qasm_simulator is None:\n            self.large_qasm.compile('large_qasm')\n        else:\n            qiskit.compile(self.large_qasm, self.local_qasm_simulator)\n\n    def setup(self):\n        version_parts = qiskit.__version__.split('.')\n    \n        if version_parts[0] == '0' and int(version_parts[1]) < 5:\n            self.local_qasm_simulator = None\n        elif hasattr(qiskit, 'BasicAer'):\n            self.local_qasm_simulator = qiskit.BasicAer.get_backend(\n                'qasm_simulator')\n        elif hasattr(qiskit, 'get_backend'):\n            self.local_qasm_simulator = qiskit.get_backend(\n                'local_qasm_simulator')\n        else:\n            self.local_qasm_simulator = qiskit.BasicAer.get_backend(\n                \"qasm_simulator\")\n        self.single_gate_circuit = self._build_single_gate_circuit()\n        self.cx_circuit = self._build_cx_circuit()\n        self.qasm_path = os.path.abspath(\n            os.path.join(os.path.dirname(__file__), 'qasm'))\n        large_qasm_path = os.path.join(self.qasm_path, 'test_eoh_qasm.qasm')\n    \n        if hasattr(qiskit, 'load_qasm_file'):\n            self.large_qasm = qiskit.load_qasm_file(large_qasm_path)\n        elif version_parts[0] == '0' and int(version_parts[1]) < 5:\n            self.large_qasm = qiskit.QuantumProgram()\n            self.large_qasm.load_qasm_file(large_qasm_path,\n                                           name='large_qasm')\n        else:\n            self.large_qasm = qiskit.QuantumCircuit.from_qasm_file(\n                large_qasm_path)", "min_run_count": 2, "unit": "seconds", "name": "transpiler_benchmarks.TranspilerBenchSuite.time_transpile_from_large_qasm", "params": [], "processes": 2, "warmup_time": -1, "number": 0}, "unroller.UnrollLargeFile.time_prime6": {"repeat": 0, "param_names": [], "timeout": 60.0, "type": "time", "sample_time": 0.01, "version": "50f4c01537cc58e9b086c6d39b58907577adb5b9147ebdff7cce1e093bdcf25a", "code": "class UnrollLargeFile:\n    def time_prime6(self):\n        pass_ = Unroller(['cx', 'u1', 'u2', 'u3'])\n        unrolled_dag = pass_.run(self.prime6)\n\n    def setup(self):\n        self.prime6 = self.load_file('prime6_pkrm.qasm')\n        self.prime8 = self.load_file('prime8_pkrm.qasm')", "min_run_count": 2, "unit": "seconds", "name": "unroller.UnrollLargeFile.time_prime6", "params": [], "processes": 2, "warmup_time": -1, "number": 0}, "unroller.UnrollerBench.time_unroll_toffoli": {"repeat": 0, "param_names": [], "timeout": 60.0, "type": "time", "sample_time": 0.01, "version": "d4ae66d165b0b93bf8daf82c9519997349c5e488a6dcc7c895c7a2c71e337598", "code": "class UnrollerBench:\n    def time_unroll_toffoli(self):\n        \"\"\"Test unroll toffoli on multi regs to h, t, tdg, cx.\n        \"\"\"\n        pass_ = Unroller(['h', 't', 'tdg', 'cx'])\n        unrolled_dag = pass_.run(self.tofolli)\n\n    def setup(self):\n        self.setup_basic()\n        self.setup_toffoli()\n        self.setup_1q_chain_conditional()", "min_run_count": 2, "unit": "seconds", "name": "unroller.UnrollerBench.time_unroll_toffoli", "params": [], "processes": 2, "warmup_time": -1, "number": 0}, "transpiler_benchmarks.TranspilerBenchSuite.time_single_gate_transpile": {"repeat": 0, "param_names": [], "timeout": 60.0, "type": "time", "sample_time": 0.01, "version": "8bdd5cf35ea888ba0cc23da7ba915d51045799b857db76d59722d19965091640", "code": "class TranspilerBenchSuite:\n    def time_single_gate_transpile(self):\n        if self.local_qasm_simulator is None:\n            self.single_gate_circuit.compile('single_gate')\n        else:\n            qiskit.compile(self.single_gate_circuit, self.local_qasm_simulator)\n\n    def setup(self):\n        version_parts = qiskit.__version__.split('.')\n    \n        if version_parts[0] == '0' and int(version_parts[1]) < 5:\n            self.local_qasm_simulator = None\n        elif hasattr(qiskit, 'BasicAer'):\n            self.local_qasm_simulator = qiskit.BasicAer.get_backend(\n                'qasm_simulator')\n        elif hasattr(qiskit, 'get_backend'):\n            self.local_qasm_simulator = qiskit.get_backend(\n                'local_qasm_simulator')\n        else:\n            self.local_qasm_simulator = qiskit.BasicAer.get_backend(\n                \"qasm_simulator\")\n        self.single_gate_circuit = self._build_single_gate_circuit()\n        self.cx_circuit = self._build_cx_circuit()\n        self.qasm_path = os.path.abspath(\n            os.path.join(os.path.dirname(__file__), 'qasm'))\n        large_qasm_path = os.path.join(self.qasm_path, 'test_eoh_qasm.qasm')\n    \n        if hasattr(qiskit, 'load_qasm_file'):\n            self.large_qasm = qiskit.load_qasm_file(large_qasm_path)\n        elif version_parts[0] == '0' and int(version_parts[1]) < 5:\n            self.large_qasm = qiskit.QuantumProgram()\n            self.large_qasm.load_qasm_file(large_qasm_path,\n                                           name='large_qasm')\n        else:\n            self.large_qasm = qiskit.QuantumCircuit.from_qasm_file(\n                large_qasm_path)", "min_run_count": 2, "unit": "seconds", "name": "transpiler_benchmarks.TranspilerBenchSuite.time_single_gate_transpile", "params": [], "processes": 2, "warmup_time": -1, "number": 0}, "qft.QftTranspileBench.time_simulator_transpile": {"repeat": 0, "param_names": ["param1"], "timeout": 60.0, "type": "time", "sample_time": 0.01, "version": "b3e71da7638157e469c870e607ffab4fdc419e94fa094cee6d9df9b9c88a5e3d", "code": "class QftTranspileBench:\n    def time_simulator_transpile(self, _):\n        transpiler.transpile(self.circuit, self.sim_backend)\n\n    def setup(self, n):\n        qr = QuantumRegister(n)\n        self.circuit = build_model_circuit(qr)\n        self.sim_backend = BasicAer.get_backend('qasm_simulator')", "min_run_count": 2, "unit": "seconds", "name": "qft.QftTranspileBench.time_simulator_transpile", "params": [["1", "2", "3", "5", "8", "13", "14"]], "processes": 2, "warmup_time": -1, "number": 0}, "random_circuit_hex.BenchRandomCircuitHex.time_simulator_transpile": {"repeat": 0, "param_names": ["param1"], "timeout": 60.0, "type": "time", "sample_time": 0.01, "version": "7c42368b1029ae064619704b60e975890799b2a97adc7f8066f9f2ba8b59ba4e", "code": "class BenchRandomCircuitHex:\n    def time_simulator_transpile(self, _):\n        transpiler.transpile(self.circuit, self.sim_backend)\n\n    def setup(self, n):\n        depth = 2 * n\n        seed = 5\n        self.circuit = make_circuit_ring(n, depth, seed)[0]\n        self.sim_backend = BasicAer.get_backend('qasm_simulator')", "min_run_count": 2, "unit": "seconds", "name": "random_circuit_hex.BenchRandomCircuitHex.time_simulator_transpile", "params": [["4", "6", "8", "10", "12", "14"]], "processes": 2, "warmup_time": -1, "number": 0}, "qft.QftTranspileBench.time_ibmq_backend_transpile": {"repeat": 0, "param_names": ["param1"], "timeout": 60.0, "type": "time", "sample_time": 0.01, "version": "f9ad037bffaeb080bc5d60f6a9914424e9f23d0b14103113fdff9d102727e436", "code": "class QftTranspileBench:\n    def time_ibmq_backend_transpile(self, _):\n        # Run with ibmq_16_melbourne configuration\n        coupling_map = [[1, 0], [1, 2], [2, 3], [4, 3], [4, 10], [5, 4],\n                        [5, 6], [5, 9], [6, 8], [7, 8], [9, 8], [9, 10],\n                        [11, 3], [11, 10], [11, 12], [12, 2], [13, 1],\n                        [13, 12]]\n        transpiler.transpile(self.circuit,\n                             basis_gates=['u1', 'u2', 'u3', 'cx', 'id'],\n                             coupling_map=coupling_map)\n\n    def setup(self, n):\n        qr = QuantumRegister(n)\n        self.circuit = build_model_circuit(qr)\n        self.sim_backend = BasicAer.get_backend('qasm_simulator')", "min_run_count": 2, "unit": "seconds", "name": "qft.QftTranspileBench.time_ibmq_backend_transpile", "params": [["1", "2", "3", "5", "8", "13", "14"]], "processes": 2, "warmup_time": -1, "number": 0}, "state_tomography.StateTomographyBench.time_state_tomography_cat": {"repeat": 0, "param_names": ["param1"], "timeout": 360.0, "type": "time", "sample_time": 0.01, "version": "378c3fde1c92feb145358aee8f1c58cf1a5a43fe801fbfc99d6a6db0c512e6fd", "code": "class StateTomographyBench:\n    def time_state_tomography_cat(self, n_qubits):\n        # cat target state: [1. 0. 0. ... 0. 0. 1.]/sqrt(2.)\n        target = np.zeros(pow(2, n_qubits))\n        target[0] = 1\n        target[pow(2, n_qubits)-1] = 1.0\n        target /= np.sqrt(2.0)\n        if not self.use_quantum_program:\n            self._state_tomography(target, 'cat', n_qubits)\n        else:\n            self._state_tomography_quantum_program(target, 'cat', n_qubits)\n\n    def setup(self, _):\n        if hasattr(qiskit, 'QuantumProgram'):\n            self.use_quantum_program = True\n        else:\n            self.use_quantum_program = False", "min_run_count": 2, "unit": "seconds", "name": "state_tomography.StateTomographyBench.time_state_tomography_cat", "params": [["2", "3", "4", "5"]], "processes": 2, "warmup_time": -1, "number": 0}, "quantum_volume.QuantumVolumeBenchmark.time_ibmq_backend_transpile": {"repeat": 0, "param_names": ["qubits", "depth"], "timeout": 600, "type": "time", "sample_time": 0.01, "version": "21f7dbbc6ae247eba1c651491b41060a03fe082518fbe8acab86ddf7814ee5c9", "code": "class QuantumVolumeBenchmark:\n    def time_ibmq_backend_transpile(self, _, __):\n        # Run with ibmq_16_melbourne configuration\n        coupling_map = [[1, 0], [1, 2], [2, 3], [4, 3], [4, 10], [5, 4],\n                        [5, 6], [5, 9], [6, 8], [7, 8], [9, 8], [9, 10],\n                        [11, 3], [11, 10], [11, 12], [12, 2], [13, 1],\n                        [13, 12]]\n        transpiler.transpile(self.circuit,\n                             basis_gates=['u1', 'u2', 'u3', 'cx', 'id'],\n                             coupling_map=coupling_map)\n\n    def setup(self, n, depth):\n        random_seed = np.random.seed(10)\n        qreg = QuantumRegister(n)\n        self.circuit = build_model_circuit(qreg, depth=depth, seed=random_seed)\n        self.sim_backend = BasicAer.get_backend('qasm_simulator')", "min_run_count": 2, "unit": "seconds", "name": "quantum_volume.QuantumVolumeBenchmark.time_ibmq_backend_transpile", "params": [["1", "2", "3", "5", "8", "13", "14"], ["1", "2", "3", "5", "8", "13", "21", "34"]], "processes": 2, "warmup_time": -1, "number": 0}}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]], "hash_length": 8, "tags": {"0.3.10": 1109, "0.5.7": 1663, "0.3.5": 891, "0.3.12": 1140, "0.2": 450, "0.4.10": 1323, "0.3.11": 1124, "0.4.0": 1241, "0.7.0": 2302, "0.4.9": 1294, "0.3.4": 877, "0.4.2": 1243, "0.3.6": 929, "0.4.14": 1437, "0.4.8": 1282, "0.4.6": 1270, "0.6.1": 2019, "0.5.1": 1490, "0.3.13": 1158, "0.5.4": 1562, "0.5.6": 1632, "0.4.4": 1253, "0.4.3": 1248, "0.5.2": 1502, "0.3.16": 1200, "0.3.3": 876, "0.3": 821, "0.5.3": 1526, "0.5.0": 1487, "0.3.7": 1069, "0.3.15": 1197, "0.4.11": 1336, "0.4.13": 1431, "0.3.8": 1081, "0.4.12": 1372, "0.6.0": 2009, "0.5.5": 1615, "0.4.7": 1275, "0.3.14": 1162, "0.1": 17, "0.3.9": 1092, "0.4.15": 1455}, "project": "qiskit-terra", "revision_to_hash": {"1282": "b281ee4b701d23e9aadd375593b23cd3ca6c57cd", "1241": "8f8bcd52dacce670a61bc0103e157be1601a1ab4", "1158": "ec5102dc7649c594e4068a2b815b59d44ad8d48c", "1162": "7f881c9e883385c04f593da7a2f590046c5cde84", "1294": "6e732d1dd8431cbbc8ce4abfe03ba7bd6f1d3277", "1069": "22fc4f3cdb22e99150f61031e0341f52334edf52", "17": "50a6789997d89545c9efb63ce9de18335e6a7610", "1431": "dc96b263ff6b4496656dae9c7b3e7f81d80de03b", "1562": "2dd47709b70fc9aeb6a8d878894d3f117448bd4f", "2459": "3caa05173261eff55af4e933fe80f5deab7e0cf3", "2460": "97a8c90a8e0674a8cd237c0de69d39d32cc4a258", "1437": "5ffa83a7ac73a8ab28ee831be187230271cb965c", "2462": "f5b553c355226bcd55aaaa2281e4f540f8d60b1d", "2463": "1eb10ca48e3cf81be1ec993358a365ec07390e7a", "2464": "b0ce0f37f7dfd30e6bacbbb937f9ff35ed580115", "929": "b049c4db914088d2c019358b8dc239a8995b006c", "1323": "05291bb8a9ed2c24a276187be83543bbd17b6494", "1197": "9a576396aab4812b3b4d58220f53d5551beb1a59", "1455": "2e4cb3acaf1b88b016a5b61d96f2a99c5ba125a4", "1200": "76d1e66347b383aab5a9a6fc6b26ef29d7f9b4fb", "821": "fdda48ab7c37eef994c27d43806d6773d440256e", "2461": "696e2b85442618504468cb34a49334c467ea1b98", "1081": "db0e78784ce4479e16a94ca016d19cb5b1d4208d", "1248": "38c6e1d0c96ee45fd68cf59123fe876cb4c824d9", "450": "236f52e42fd30627feb77a4caf8fc8ccb4d67a5e", "1092": "8d534a40604c550ebe77a89012d16d047c9d760f", "1526": "df613ef8532115a85282f90679d7de9d45309bd0", "2465": "b066ab38c2dda1fb8f318161296040f5d4b6cd87", "1487": "95bba4c8d9d5c52b4c54ac2a1a579864d4965fe7", "1336": "fe507853fc07a2b2458f97308cd6dba8f23f0b0d", "1490": "d756dc196bec3e27ddb1c4c4f6e18d078ce2ebc5", "1109": "35c373f5ce9bb18b2a5d4b9249da62d682661c12", "2009": "a3c67a5505ba44dcf9bce2c03f9e5b8b3170f6db", "1243": "3e7c3fd075914a6d2896af61417a06c1aabfa3d5", "1372": "b28fb3df0c5b8f0bb04200c6c38dd8bf84dd4308", "1502": "29e075f56cdf40fbaf3c42aa06e7bb8c6f768490", "1632": "badebbc96634f098c3207d0eb61e281a1af0d83a", "2019": "58f5ba91dd9ad9691a0912c2dea282a149a0d530", "1124": "ebb02533599b04cbdafa0e4333ff31eed6928d50", "1253": "4d95921a6489c075a25a5a4d6c3a691c32b3c1aa", "876": "d84c48a21e9fbf201ba3d0ea77153d7501f1fff0", "877": "9a621518ba04f31e6029d21f85edc0d16e830723", "1140": "9294a3804c16f5a81fffbf5179ce7d9c9fdc3af1", "1275": "d8318b4fc099a3f5c30bb84a6d3f1e11dac263c3", "1270": "87a995b2d81a8e89387e897c6bdb475b9e17eb8a", "1615": "121980087264e5fbd740e203ab68dc1ef9d841dc", "891": "e8f3f5f7c3b2aa2a6b434ced34e3f0ca84615842", "2302": "bb5880d6275558e07929f163ad811fe8bc0f351e", "1663": "829ca256942495faedb705bda718d641da8e4c63"}, "machines": {"qiskit-dag-benchmark": {"version": 1, "arch": "x86_64", "os": "Linux 4.9.0-8-amd64", "cpu": "Intel(R) Xeon(R) CPU @ 2.30GHz", "machine": "qiskit-dag-benchmark", "ram": "3792956"}}, "params": {"arch": ["x86_64"], "python": ["3.5"], "branch": ["master"], "os": ["Linux 4.9.0-8-amd64"], "cpu": ["Intel(R) Xeon(R) CPU @ 2.30GHz"], "machine": ["qiskit-dag-benchmark"], "ram": ["3792956"]}, "show_commit_url": "http://github.com/Qiskit/qiskit-terra/commit/"}